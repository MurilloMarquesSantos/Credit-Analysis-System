server:
  port: 8080
jwt:
  public:
    key: classpath:config/app.pubKey
  private:
    key: classpath:config/app.privKey
spring:
  application:
    name: user-service
  datasource:
    url: ${MYSQL_URL:jdbc:mysql://127.0.0.1:3307/userSystem?createDatabaseIfNotExist=true}
    username: ${MYSQL_PASS}
    password: ${MYSQL_PASS}
  jpa:
    hibernate:
      ddl-auto: update
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT}
            client-secret: ${GOOGLE_SECRET}
          client-credentials-client:
            client-id: ${CLIENT_ID}
            client-secret: ${CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: ADMIN
        provider:
          client-credentials-client:
            token-uri: ${TOKEN_URI:http://localhost:8081/oauth2/token}
  rabbitmq:
    host: localhost
    port: 5672
    username: ${RABBIT_USER}
    password: ${RABBIT_PASSWORD}
    listener:
      simple:
        auto-startup: true
    queue:
      proposal: queue.proposal
      proposal-delete: queue.proposal.delete
      notification-validation: queue.notification.user.validation
      notification-created: queue.notification.user.created
      notification-delete-user: queue.notification.user.delete
      notification-delete-confirmation: queue.notification.user.confirmation
      documentation:
        receipt: queue.user.receipt
        deletion: queue.user.deletion
        documentation-info: queue.documentation
      credit:
        analyzed-credit: queue.analyzed.credit
        analysis: queue.credit.analysis
      notification:
        proposal-receipt: queue.notification.receipt
        proposal-status: queue.proposal.status

    exchange:
      notification: notification.exchange
      notification-receipt: notification.receipt.exchange
      proposal: proposal.exchange
      documentation: documentation.exchange
      credit: credit.exchange
      proposal-notification: status.exchange
      documentation-document: document.exchange
      analyzed-credit: analyzed.exchange
resilience4j:
  circuitbreaker:
    instances:
      proposalService:
        registerHealthIndicator: true
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
  retry:
    instances:
      proposalService:
        maxAttempts: 3
        waitDuration: 2s

proposal:
  service:
    url: http://localhost:8081

management:
  info:
    env:
      enabled: true
  endpoints:
    web:
      exposure:
        include: info, health, metrics, prometheus
  metrics:
    tags:
      application: ${spring.application.name}
info:
  app: Credit System API
  github: https://github.com/MurilloMarquesSantos/Credit-Analysis-System