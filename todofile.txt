CRIAR E COLOCAR OS CONTAINERS EM NETWORKS PARA FUTUROS BUILD
PARA TEST CONTAINERS LEMBRAR DE USAR "static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.0.28")
                                              .withReuse(true);"
                                              PARA QUE N츾O PRECISE SUBIR UM CONTAINER NOVO TODA VEZ QUE INICAR UM CLASSE DE TESTE
                                              MELHOR OTIMIZA칂츾O

1. Auth/User-Service (porta 8081)
游댳 Respons치vel por:

Login tradicional e social (OAuth2 + JWT)

Cadastro e gerenciamento de usu치rios

Endpoints REST de entrada (propostas, hist칩rico, etc.)

Comunica칞칚o com os outros servi칞os (REST + RabbitMQ)

2. Proposal-Service (8082)

usar registered clients
游댳 Respons치vel por:

Receber proposta (REST ou via fila)

Salvar proposta (opcional, se quiser manter hist칩rico por aqui)

Iniciar fluxo de an치lise via RabbitMQ

Retornar decis칚o para o 8081 (opcionalmente via fila ou REST)

3. Credit-Analysis-Service (8083)
游댳 Respons치vel por:

Aplicar regras de neg칩cio para avaliar a proposta

Estrat칠gias diferentes para perfis (padr칚o Strategy)

Retornar decis칚o via RabbitMQ para o Proposal-Service

4. Notification-Service (8084)
游댳 Respons치vel por:

Enviar e-mail com decis칚o (via AWS SES)

(Opcional) Enviar SMS via AWS SNS

Ativado por eventos (RabbitMQ)

5. Document-Service (8085)
游댳 Respons치vel por:

Upload e organiza칞칚o de documentos (comprovantes, etc.)

Integra칞칚o com AWS S3

Pode usar padr칚o Factory para tratar diferentes tipos de documento